package com.sage.dao;

import com.sage.model.vulnerability.VulnerabilityModel;
import com.sage.utility.JPAManager;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;

import java.sql.Clob;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class VulnerabilityDao extends Dao<VulnerabilityModel, Integer> {

    private static VulnerabilityDao instance;

    private VulnerabilityDao() {
        super();
    }

    public static VulnerabilityDao instance() {
        if (instance == null)
            instance = new VulnerabilityDao();

        return instance;
    }

    @Override
    public boolean create(VulnerabilityModel entity) {
        EntityManager entityManager = JPAManager.getEntityManager();
        EntityTransaction transaction = entityManager.getTransaction();
        try {
            transaction.begin();
            entityManager.persist(entity);
            transaction.commit();
            return true;
        } catch (Exception e) {
            if (transaction.isActive())
                transaction.rollback();

            LOGGER.severe("[VulnerabilityDao] Error while inserting new vulnerability entity into database: " + e.getMessage());
            return false;
        } finally {
            entityManager.close();
        }
    }

    @Override
    public VulnerabilityModel read(Integer key) {
        EntityManager entityManager = JPAManager.getEntityManager();
        EntityTransaction transaction = entityManager.getTransaction();
        try {
            transaction.begin();
            VulnerabilityModel vulnerabilityModel = entityManager.find(VulnerabilityModel.class, key);
            transaction.commit();
            return vulnerabilityModel;
        } catch (Exception e) {
            LOGGER.warning("[VulnerabilityDao] Error while trying to fetch entity with (id)=" + key);
            return null;
        } finally {
            entityManager.close();
        }

    }

    @Override
    VulnerabilityModel update(Integer key, VulnerabilityModel newEntity) {
        EntityManager entityManager = JPAManager.getEntityManager();
        EntityTransaction transaction = entityManager.getTransaction();

        try {
            transaction.begin();
            VulnerabilityModel entity = entityManager.find(VulnerabilityModel.class, key);
            if (entity == null) {
                LOGGER.warning(String.format("[VulnerabilityDao] Error while updating entity. Entity with id=(%d) could not be found.", key));
                return null;
            } else {
                return null;
                // update (actually not even necessary for this project :P
            }
        } finally {
            entityManager.close();
        }
    }

    @Override
    boolean delete(Integer key) {
        // TODO Auto-generated method stub
        // Not necessary for this project :P
        throw new UnsupportedOperationException("Unimplemented method 'delete'");
    }

    public List<VulnerabilityModel> readAll() {
        EntityManager entityManager = JPAManager.getEntityManager();

        String query = "SELECT v FROM VulnerabilityModel v";

        try {
            List<VulnerabilityModel> vulnerabilityModels = entityManager.createQuery(query, VulnerabilityModel.class).getResultList();
            return vulnerabilityModels;
        } catch (Exception e) {
            LOGGER.warning("Error occured while fetching all vulnerabilities from database: " + e.getMessage());
            return new ArrayList<>();
        } finally {
            entityManager.close();
        }
    }

    public HashMap<String, Integer> getSeverities() {
        EntityManager entityManager = JPAManager.getEntityManager();

        String query = "SELECT severity, COUNT(*) AS count FROM vulnerabilities GROUP BY severity";

        try {
            List<Object[]> results = entityManager.createNativeQuery(query).getResultList();
            HashMap<String, Integer> severities = new HashMap<>();

            for (Object[] row : results) {
                String severity = (String) row[0];
                Number count = (Number) row[1];
                severities.put(severity, count.intValue());
            }

            return severities;
        } catch (Exception e) {
            LOGGER.warning("Error occured while fetching severities from database: " + e.getMessage());
            return new HashMap<>();
        } finally {
            entityManager.close();
        }
    }

}
