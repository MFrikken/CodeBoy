package com.sage.dao;

import com.sage.model.vulnerability.VulnerabilityModel;

import java.sql.Clob;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class VulnerabilityDao extends Dao<VulnerabilityModel, Integer> {

    private static VulnerabilityDao instance;

    private VulnerabilityDao() {
        super();
    }

    public static VulnerabilityDao instance() {
        if (instance == null)
            instance = new VulnerabilityDao();

        return instance;
    }

    @Override
    public boolean create(VulnerabilityModel entity) {
        try {
            tx.begin();
            em.persist(entity);
            tx.commit();
            return true;
        } catch (Exception e) {
            LOGGER.severe("[VulnerabilityDao] Error while inserting new vulnerability entity into database: " + e.getMessage());
            return false;
        }
    }

    @Override
    public VulnerabilityModel read(Integer key) {
        tx.begin();
        VulnerabilityModel vulnerabilityModel = em.find(VulnerabilityModel.class, key);
        tx.commit();
        return vulnerabilityModel;
    }

    @Override
    VulnerabilityModel update(Integer key, VulnerabilityModel newEntity) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'update'");
    }

    @Override
    boolean delete(Integer key) {
        // TODO Auto-generated method stub
        throw new UnsupportedOperationException("Unimplemented method 'delete'");
    }

    public List<VulnerabilityModel> readAll() {
        String query = "SELECT * FROM vulnerabilities;";

        List<Object[]> results = em.createNativeQuery(query).getResultList();
        List<VulnerabilityModel> vulnerabilityModels = new ArrayList<VulnerabilityModel>();

        for (Object[] row : results) {
            for (int i = 0; i < row.length; i++) {
                System.out.println(row[i]);
            }
            VulnerabilityModel vulnerabilityModel = new VulnerabilityModel(
                    ((Number) row[0]).intValue(),
                    (String) row[1],
                    (String) row[2],
                    ((Clob) row[3]).toString(),
                    (String) row[4],
                    (String) row[5],
                    (String) row[6],
                    (String) row[7]
            );
            vulnerabilityModels.add(vulnerabilityModel);
        }

        return vulnerabilityModels;
    }

    public HashMap<String, Integer> getSeverities() {
        String query = "SELECT severity, COUNT(*) AS count FROM vulnerabilities GROUP BY severity";

        List<Object[]> results = em.createNativeQuery(query).getResultList();
        HashMap<String, Integer> severities = new HashMap<>();

        for (Object[] row : results) {
            String severity = (String) row[0];
            Number count = (Number) row[1];
            severities.put(severity, count.intValue());
        }

        return severities;
    }

}
