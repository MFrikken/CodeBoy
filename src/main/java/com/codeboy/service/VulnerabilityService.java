package com.codeboy.service;

import com.codeboy.dto.VulnerabilityDto;
import com.codeboy.dto.WeaknessDto;
import com.codeboy.model.vulnerability.VulnerabilityModel;
import com.codeboy.model.weakness.WeaknessModel;
import com.codeboy.repository.VulnerabilityRepository;
import com.codeboy.repository.WeaknessRepository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class VulnerabilityService {
    private VulnerabilityRepository vulnerabilityRepository;
    private WeaknessRepository weaknessRepository;

    public VulnerabilityService() {
        this.vulnerabilityRepository = new VulnerabilityRepository();
        this.weaknessRepository = new WeaknessRepository();
    }

    public HashMap<String, Integer> getStatistics() {
        HashMap<String, Integer> statistics = this.vulnerabilityRepository.fetchStatistics();
        return statistics;
    }

    public VulnerabilityDto getById(Integer id) {
        VulnerabilityModel vulnerability = this.vulnerabilityRepository.getByID(id);
        List<WeaknessDto> weaknesses = this.weaknessRepository.getAllByVulnerabilityId(vulnerability.getId()).stream()
                .map(WeaknessModel::toDto)
                .toList();
        return vulnerability.toDto(weaknesses);
    }

    public List<VulnerabilityDto> getAll() {
        List<VulnerabilityModel> models = this.vulnerabilityRepository.getAll();
        if (models == null || models.isEmpty()) {
            throw new RuntimeException("No VulnerabilityModels found");
        }
        List<VulnerabilityDto> dtos = new ArrayList<>();
        for (VulnerabilityModel vulnerabilityModel : models) {
            List<WeaknessModel> weaknessModels = weaknessRepository.getAllByVulnerabilityId(vulnerabilityModel.getId());
            dtos.add(vulnerabilityModel.toDto(weaknessModels.stream().map(WeaknessModel::toDto).toList()));
        }
        return dtos;
    }
}
