package com.codeboy.model.vulnerability;

import com.codeboy.dto.WeaknessDto;
import com.fasterxml.jackson.databind.JsonNode;
import com.codeboy.dto.VulnerabilityDto;
import com.codeboy.model.weakness.WeaknessModel;
import jakarta.persistence.*;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents the database table of a vulnerability and should be used for any CRUD-relating operations.
 */

@Entity
@Table(name = "vulnerabilities")
public class VulnerabilityModel {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    public String category;

    @Column(name = "name")
    public String name;

    @Lob
    public String description;

    public String cve;
    public String severity;
    public String locationFile;
    public String locationLineStart;
    public String locationLineEnd;

    @OneToMany(mappedBy = "vulnerability", cascade = CascadeType.ALL, orphanRemoval = true)
    public List<WeaknessModel> weaknesses = new ArrayList<>();

    public VulnerabilityModel() {}

    public VulnerabilityModel(String category, String name, String description, String cve, String severity, String locationFile, String locationLineStart) {
        this.category = category;
        this.name = name;
        this.description = description;
        this.cve = cve;
        this.severity = severity;
        this.locationFile = locationFile;
        this.locationLineStart = locationLineStart;
    }

    public Integer getId() {
        return id;
    }

    public String getCategory() {
        return category;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public String getCve() {
        return cve;
    }

    public String getSeverity() {
        return severity;
    }

    public String getLocationFile() {
        return locationFile;
    }

    public String getLocationLineStart() {
        return locationLineStart;
    }

    public String getLocationLineEnd() {
        return locationLineEnd;
    }

    public List<WeaknessModel> getWeaknesses() { return this.weaknesses; }
    public void setWeaknesses(List<WeaknessModel> weaknesses) { this.weaknesses = weaknesses; }

    public static VulnerabilityModel fromJsonNode(JsonNode node) {
        VulnerabilityModel model = new VulnerabilityModel();
        model.category = node.get("category").asText();
        model.name = node.get("name").asText();
        model.description = sanitizeDescription(node.get("description").asText());
        model.cve = node.get("cve").asText();
        model.severity = node.get("severity").asText();
        model.locationFile = node.get("location").get("file").asText();
        model.locationLineStart = node.get("location").get("start_line").asText();
        // TODO: locationLineEnd

        return model;
    }

    private static String sanitizeDescription(String description) {
        return description.replaceAll("[\\r\\n]", "");
    }

    public String asSQLValues() {
        return String.format("(%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
                id,
                escape(category),
                escape(name),
                escape(description),
                escape(cve),
                escape(severity),
                escape(locationFile),
                escape(locationLineStart),
                ""
        );
    }

    public VulnerabilityDto toDto(List<WeaknessDto> weaknessDtos) {
        return VulnerabilityDto.from(this, weaknessDtos);
    }

    private String escape(String s) {
        return s == null ? "" : s.replace("'", "''"); // escape single quotes
    }

    @Override
    public String toString() {
        return this.asSQLValues();
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) return true;

        if (!(o instanceof VulnerabilityModel)) return false;

        VulnerabilityModel vulnerabilityModel = (VulnerabilityModel) o;
        return vulnerabilityModel.getId() == this.id;
    }

    @Override
    public int hashCode() {
        int result = id.hashCode();
        result = 31 * result + category.hashCode();
        result = 31 * result + name.hashCode();
        result = 31 * result + description.hashCode();
        result = 31 * result + cve.hashCode();
        result = 31 * result + severity.hashCode();
        result = 31 * result + locationFile.hashCode();
        result = 31 * result + locationLineStart.hashCode();
        result = 31 * result + locationLineEnd.hashCode();
        return result;
    }
}
